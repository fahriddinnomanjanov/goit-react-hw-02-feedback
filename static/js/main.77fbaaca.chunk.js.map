{"version":3,"sources":["components/Statistics/Statistics.jsx","components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","posPercentage","Section","title","children","FeedbackOptions","onLeaveFeedback","onClick","Notification","message","App","state","increase","statName","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","toFixed","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAkBeA,MAlBf,YAAiE,IAA5CC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,IAAKC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,cAGxC,OACI,mCAEI,gCACI,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAYC,KACX,oDAAuBC,EAAvB,aCFNC,EATC,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACrB,OACI,qCACI,6BAAKD,IACJC,MCUEC,EAZS,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBAEvB,OACI,qCAEI,wBAAQC,QAAS,kBAAMD,EAAgB,SAAvC,kBACA,wBAAQC,QAAS,kBAAMD,EAAgB,YAAvC,qBACA,wBAAQC,QAAS,kBAAMD,EAAgB,QAAvC,qBCLOE,EAJE,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAO,6BAAKA,KCyDDC,E,4MAjDbC,MAAQ,CACNd,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGLa,SAAW,SAACC,GACR,EAAKC,UAAS,SAACC,GAAD,sBACTF,EAAWE,EAAUF,GAAY,O,EAI1CG,mBAAqB,WACnB,MAA+B,EAAKL,MAElC,OAFF,EAAQd,KAAR,EAAcC,QAAd,EAAuBC,K,EAMzBkB,gCAAkC,WAC9B,IAAQpB,EAAS,EAAKc,MAAdd,KACFG,EAAQ,EAAKgB,qBACnB,OAAKhB,GAGWH,EAAOG,EAAS,KAClBkB,QAAQ,GAHZ,G,4CAMhB,WACE,MAA+BC,KAAKR,MAA5Bd,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBC,EAAQmB,KAAKH,qBACbf,EAAgBkB,KAAKF,kCAC3B,OACE,qCACE,cAAC,EAAD,CAASd,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBG,gBAAiBa,KAAKP,aAExCZ,EAAQ,EAAI,cAAC,EAAD,CAASG,MAAM,aAAf,SACX,cAAC,EAAD,CAAYN,KAAMA,EAAMC,QAASA,EAASC,IAAKA,EAAKC,MAAOA,EAAOC,cAAgBA,MACtE,cAAC,EAAD,CAAcQ,QAAQ,6B,GAzC1BW,aCJlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.77fbaaca.chunk.js","sourcesContent":["function Statistics({good, neutral, bad, total, posPercentage}) {\r\n    \r\n    \r\n        return (\r\n            <>\r\n\r\n                <div>\r\n                    <p>Good: {good}</p>\r\n                    <p>Neutral: {neutral}</p>\r\n                    <p>Bad: {bad}</p>\r\n                    <p>Total: { total }</p>\r\n                   { <p>Positive feedback: {posPercentage}%</p>}\r\n                </div>\r\n            </>\r\n        )\r\n    \r\n}\r\n\r\nexport default Statistics;","const Section = ({title, children}) => {\r\n    return (\r\n        <>\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Section;","import React from 'react';\r\n\r\nconst FeedbackOptions = ({ onLeaveFeedback }) => {\r\n\r\n    return (\r\n        <>\r\n  \r\n            <button onClick={() => onLeaveFeedback(\"good\")}>Good</button>\r\n            <button onClick={() => onLeaveFeedback(\"neutral\")}>Neutral</button>\r\n            <button onClick={() => onLeaveFeedback(\"bad\")}>Bad</button>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default FeedbackOptions;","const Notification = ({message}) => {\r\n    return <h2>{message}</h2>\r\n}\r\n\r\n    export default Notification;","import { Component } from 'react';\nimport Statistics from './components/Statistics';\nimport Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Notification from './components/Notification';\n\n\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  }\n\n    increase = (statName) => {\n        this.setState((prevState) => ({\n            [statName]: prevState[statName] + 1\n        }))\n    }\n\n    countTotalFeedback = () => {\n      const { good, neutral, bad } = this.state;\n        const result = good + neutral + bad;\n        return result;\n    }\n\n\n    countPositiveFeedbackPercentage = () => {\n        const { good } = this.state;\n        const total = this.countTotalFeedback()\n        if (!total) {\n           return 0 \n        }\n        const result = (good / total) * 100;\n        return result.toFixed(2) \n    }\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback()\n    const posPercentage = this.countPositiveFeedbackPercentage()\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions onLeaveFeedback={this.increase} />\n        </Section>\n        {total > 0 ? <Section title=\"Statistics\">\n          <Statistics good={good} neutral={neutral} bad={bad} total={total} posPercentage={ posPercentage }/>\n        </Section> :  <Notification message=\"No feedback given\"></Notification>   }\n        \n     \n      \n      </>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}